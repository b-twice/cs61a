(define (enclosing-environment env) (cdr env))
(define (first-frame env) (car env))
(define the-empty-environment '())

(define (make-frame variables values)
    (cons (cons (car variables (car values))) (make-frame (cdr variables) (cdr values))))
(define (add-binding-to-frame! var val frame)
    (set-car! frame (cons (cons var val) (car frame))))

(define (extend-environment vars vals base-env)
    (if (= (length vars) (length vals))
        (cons (make-frame vars vals) base-env)
        (if (< (length vars) (length vals))
            (error "Too many arguments supplied" vars vals)
            (error "Too few arguments supplied" vars vals))))

(define (lookup-variable-value var env)
    (define (env-loop env)
        (define (scan frame)
            (cond ((null? frame)
                (env-loop (enclosing-environment env)))
            ((eq? var (caar frame)) (cadr frame))
            (else (scan (cdr frame) ))))
        (if (eq? env the-empty-environment)
            (error "Unbound variable" var)
            (let ((frame (first-frame env)))
                (scan frame))))
    (env-loop env))

(define (define-variable! var val env)
    (let ((frame (first-frame env)))
        (define (scan frame)
            (cond ((null? frame)
            (add-binding-to-frame! var val frame))
            ((eq? var (caar frame)) (set-car! (car frame) val))
            (else (scan frame))))
        (scan frame)))